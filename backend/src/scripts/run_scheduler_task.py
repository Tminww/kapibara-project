"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Pydantic —Å—Ö–µ–º
"""
import requests
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path
from config import settings
from schemas import RequestValidatorStartSchema

WAIT_TIME = 1800 # 30 –º–∏–Ω—É—Ç

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(getattr(settings, 'LOG_FILE', f'{settings.BASE_DIR}/log/scheduler.log')),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class TaskScheduler:
    def __init__(self):
        self.base_url = f"{settings.HOST_SCHEME}://{settings.HOST}:{settings.PORT}/api"
        self.session = requests.Session()
        self.session.headers.update({'Content-Type': 'application/json'})
    
    def start_parser(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
        
        response = self.session.post(
            f"{self.base_url}/parser/start",
            timeout=30
        )
        response.raise_for_status()
        
        result = response.json()
        return result
    
    def status_parser(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞...")
        
        response = self.session.get(
            f"{self.base_url}/parser/status",
            timeout=30
        )
        response.raise_for_status()
        
        result = response.json()
        return result
    
    def start_validator(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pydantic —Å—Ö–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ö–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        validator_params = RequestValidatorStartSchema(
            start_date=(datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),
            end_date=datetime.now().strftime("%Y-%m-%d"),
            send_email=getattr(settings, 'SEND_EMAIL', True),
            recipient_email=getattr(settings, 'RECIPIENT_EMAIL', 'admin@example.com')
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = validator_params.model_dump()
        
        response = self.session.post(
            f"{self.base_url}/validator/start",
            json=data,
            timeout=30
        )
        response.raise_for_status()
        
        result = response.json()
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω: {result} - {validator_params.start_date} –¥–æ {validator_params.end_date}")
        return result
    
    def run_scheduled_tasks(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        logger.info("=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á ===")
        
        try:
            # 1. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
            parser_result = self.start_parser()
            time.sleep(10)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            status = self.status_parser()
            if status.get("state") in ["STARTED", "PROGRESS"]:
                logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω: {status.get('task_id')}")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞")
                return
            
            while True:
                status = self.status_parser()
                if status.get("state") not in ["STARTED", "PROGRESS"]:
                    break
                logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status['state']}. –û–∂–∏–¥–∞–Ω–∏–µ...")
                      
                # 2. –û–∂–∏–¥–∞–Ω–∏–µ
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {WAIT_TIME // 60} –º–∏–Ω—É—Ç...")
                time.sleep(WAIT_TIME)
            
            
            # 3. –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            validator_result = self.start_validator()
            
            logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            raise

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    lock_file = Path(f'{settings.BASE_DIR}/scripts/scheduler.lock')
    
    if lock_file.exists():
        logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        lock_file.touch()
        scheduler = TaskScheduler()
        scheduler.run_scheduled_tasks()
    finally:
        if lock_file.exists():
            lock_file.unlink()

if __name__ == "__main__":
    main()