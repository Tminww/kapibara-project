"""refactoring: in types_in_block id_doc_type -> id_type

Revision ID: 09343eaddc03
Revises: ab93ea3bf860
Create Date: 2024-05-02 16:48:59.934476

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "09343eaddc03"
down_revision: Union[str, None] = "ab93ea3bf860"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("types_in_block", sa.Column("id_type", sa.Integer(), nullable=True))
    op.drop_constraint(
        "types_in_block_id_id_doc_type_id_block_key", "types_in_block", type_="unique"
    )
    op.create_unique_constraint(None, "types_in_block", ["id", "id_type", "id_block"])
    op.drop_constraint(
        "types_in_block_id_doc_type_fkey", "types_in_block", type_="foreignkey"
    )
    op.create_foreign_key(None, "types_in_block", "types", ["id_type"], ["id"])
    op.drop_column("types_in_block", "id_doc_type")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "types_in_block",
        sa.Column("id_doc_type", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "types_in_block", type_="foreignkey")
    op.create_foreign_key(
        "types_in_block_id_doc_type_fkey",
        "types_in_block",
        "types",
        ["id_doc_type"],
        ["id"],
    )
    op.drop_constraint(None, "types_in_block", type_="unique")
    op.create_unique_constraint(
        "types_in_block_id_id_doc_type_id_block_key",
        "types_in_block",
        ["id", "id_doc_type", "id_block"],
    )
    op.drop_column("types_in_block", "id_type")
    # ### end Alembic commands ###
